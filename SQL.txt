Сначала оставьте только те объявления, где оценка на основе отзывов выше среднего, а число отзывов в месяц составляет 
строго меньше трёх. Затем отсортируйте по убыванию две колонки: сначала по числу отзывов в месяц, потом по оценке. 
В качестве ответа укажите id объявления из первой строки.

review_scores_rating – оценка на основе отзывов
reviews_per_month – число отзывов в месяц
id – идентификатор объявления
Таблица – listings. Наивысшие показатели = сортировка по убыванию.

Вариант с подзапросом:
SELECT
    id,
    toFloat64OrNull(review_scores_rating) AS review_scores_rating,
    reviews_per_month
FROM listings
WHERE
    review_scores_rating > (SELECT avg(toFloat32OrNull(review_scores_rating))
                            FROM listings)
    AND reviews_per_month < 3
ORDER BY 
    reviews_per_month DESC,
    review_scores_rating DESC
LIMIT 10

Вариант с блоком WITH:
WITH
    (
    SELECT avg(toFloat32OrNull(review_scores_rating)) 
    FROM listings
    ) AS avg_review_scores_rating
SELECT
    id,
    toFloat32OrNull(review_scores_rating) AS review_scores_rating,
    reviews_per_month
FROM listings
WHERE
    review_scores_rating > avg_review_scores_rating
    AND reviews_per_month < 3
ORDER BY 
    reviews_per_month DESC,
    review_scores_rating DESC
LIMIT 10

Посчитайте среднее расстояние до центра города и выведите идентификаторы объявлений о сдаче отдельных комнат, для которых
 расстояние оказалось меньше среднего. Результат отсортируйте по убыванию, тем самым выбрав комнату, которая является наиболее
 удаленной от центра, но при этом расположена ближе, чем остальные комнаты в среднем. 

id – идентификатор объявления
host_id – идентификатор хозяина
room_type – тип жилья ('Private room')
latitude – широта
longitude – долгота
52.5200 с.ш., 13.4050 в.д – координаты центра Берлина
В качестве ответа укажите идентификатор хозяина (host_id), сдающего данную комнату.

Вариант с блоком WITH:
WITH 
    (SELECT 
        avg(geoDistance(13.4050, 52.5200, toFloat32OrNull(longitude), toFloat32OrNull(latitude)))  
    FROM listings
    WHERE room_type = 'Private room'
    ) AS avg_distance
SELECT
    id,
    host_id,
    room_type,
    geoDistance(13.4050, 52.5200, toFloat32OrNull(longitude), toFloat32OrNull(latitude)) AS distance
FROM  listings
WHERE 
    room_type = 'Private room'
    AND distance < avg_distance
ORDER BY distance DESC
LIMIT 10

Вариант с блоком WHERE:
SELECT
    id,
    host_id,
    room_type,
    geoDistance(13.4050, 52.5200, toFloat32OrNull(longitude), toFloat32OrNull(latitude)) AS distance
FROM  listings
WHERE 
    room_type = 'Private room'
    AND distance < (SELECT 
                        avg(geoDistance(13.4050, 52.5200, toFloat32OrNull(longitude), toFloat32OrNull(latitude)))  
                    FROM listings
                    WHERE room_type = 'Private room'
                    )
ORDER BY distance DESC
LIMIT 10

Представим, что вы планируете снять жилье в Берлине на 7 дней, используя более хитрые фильтры, чем предлагаются на сайте.
В этой задаче можно потренироваться в написании подзапросов, но задание можно решить и без них.
Отберите объявления из таблицы listings, которые:
-находятся на расстоянии от центра меньше среднего (здесь нам пригодится запрос из предыдущего задания)
-обойдутся дешевле 100$ в день (price с учетом cleaning_fee, который добавляется к общей сумме за неделю, 
 т.е его нужно делить на кол-во дней)
-имеют последние отзывы (last_review), начиная с 1 сентября 2018 года
-имеют WiFi в списке удобств (amenities)
Отсортируйте полученные значения по убыванию review_scores_rating (не забудьте перевести строку к численному виду) 
и в качестве ответа укажите host_id из первой строки. 

SELECT 
    id,
    host_id,
    geoDistance(13.4050, 52.5200, toFloat32OrNull(longitude), toFloat32OrNull(latitude)) AS distance,
    (toFloat32OrNull(replaceAll(price, '$', '')) * 7 + toFloat32OrNull(replaceAll(cleaning_fee, '$', ''))) / 7 AS full_price,
    toDateOrNull(last_review) AS last_review,
    toFloat32OrNull(review_scores_rating) AS review_scores_rating,
    multiSearchAnyCaseInsensitive(amenities, ['wifi']) AS wifi_option
FROM listings
WHERE
    distance < (SELECT 
                    avg(geoDistance(13.4050, 52.5200, toFloat32OrNull(longitude), toFloat32OrNull(latitude)))  
                FROM listings
                WHERE room_type = 'Private room'
                )
    AND full_price < 100
    AND last_review > toDate('2018-09-01')
    AND wifi_option = 1
ORDER BY
    review_scores_rating DESC
LIMIT 100

Давайте найдем в таблице calendar_summary те доступные (available='t') объявления, у которых число отзывов от уникальных 
пользователей в таблице reviews выше среднего. Для этого с помощью конструкции WITH посчитайте среднее число уникальных 
reviewer_id из таблицы reviews на каждое жильё, потом проведите джойн таблиц calendar_summary и reviews по полю listing_id
(при этом из таблицы calendar_summary должны быть отобраны уникальные listing_id, отфильтрованные по правилу available='t'). 
Результат отфильтруйте так, чтобы остались только записи, у которых число отзывов от уникальных людей выше среднего.
Отсортируйте результат по возрастанию listing_id и в качестве ответа впишите количество отзывов от уникальных пользователей 
из первой строки.

WITH
    (SELECT avg(reviewer_number)
    FROM 
        (
        SELECT 
            listing_id,
            count(DISTINCT reviewer_id) AS reviewer_number
        FROM reviews
        GROUP BY listing_id
        )
    ) AS avg_reviewer_number
SELECT
    l.listing_id AS listing_id,
    r.reviewer_number AS reviewer_number
FROM
    (
    SELECT
        DISTINCT listing_id
    FROM calendar_summary
    WHERE available = 't'
    ) AS l
JOIN 
    (
    SELECT 
        listing_id,
        count(DISTINCT reviewer_id) AS reviewer_number
    FROM reviews
    GROUP BY listing_id
    ) AS r
    ON l.listing_id = r.listing_id
WHERE reviewer_number > avg_reviewer_number
ORDER BY listing_id ASC
LIMIT 10

Возвращаемся к данными мобильного приложения!
Используйте таблицу checks и разделите всех покупателей на сегменты:
А — средний чек покупателя менее 5 ₽
B — средний чек покупателя от 5-9 ₽
C — средний чек покупателя от 10-19 ₽
D — средний чек покупателя от 20 ₽
Отсортируйте результирующую таблицу по возрастанию UserID и укажите сегмент четвертого пользователя.

SELECT
    UserID,
    avg(Rub) AS avg_check,
    CASE
        WHEN avg_check < 5 THEN 'A'
        WHEN avg_check < 10 THEN 'B'
        WHEN avg_check < 20 THEN 'C'
        ELSE 'D'
    END AS group_name
FROM checks
GROUP BY UserID
ORDER BY UserID ASC
LIMIT 10

Используйте предыдущий запрос как подзапрос и посчитайте, сколько клиентов приходится на каждый сегмент и сколько доходов
 он приносит. Отсортируйте результат по убыванию суммы доходов на сегмент и в качестве ответа укажите наибольшую сумму.

SELECT
    r.group_name AS group_name,
    sum(l.Rub) AS Rub
FROM checks AS l
# объединим таблицу checks (где есть сумма чека каждой покупки) и таблицу из прошлого задания (где есть сегмент покупателя)
JOIN
    (
    SELECT
        UserID,
        avg(Rub) AS avg_check,
        CASE
            WHEN avg_check < 5 THEN 'A'
            WHEN avg_check < 10 THEN 'B'
            WHEN avg_check < 20 THEN 'C'
            ELSE 'D'
        END AS group_name
    FROM checks
    GROUP BY UserID
    ) AS r
    ON l.UserID = r.UserID
GROUP BY group_name
ORDER BY Rub DESC

Вернемся к таблице AirBnb. Предположим, что в выборе жилья нас интересует только два параметра: наличие кухни (kitchen) 
и гибкой системы отмены (flexible), причем первый в приоритете.
Создайте с помощью оператора CASE колонку с обозначением группы, в которую попадает жилье из таблицы listings:
-'good', если в удобствах (amenities) присутствует кухня и система отмены (cancellation_policy) гибкая
-'ok', если в удобствах есть кухня, но система отмены не гибкая
-'not ok' во всех остальных случаях
Результат отсортируйте по новой колонке по возрастанию, установите ограничение в 5 строк, в качестве ответа укажите host_id первой строки.
Обратите внимание, что cancellation_policy - это отдельная колонка, по ней необходимо смотреть систему отмены

SELECT 
    host_id,
    CASE
        WHEN multiSearchAnyCaseInsensitive(amenities, ['kitchen']) AND cancellation_policy = 'flexible' THEN 'good'
        WHEN multiSearchAnyCaseInsensitive(amenities, ['kitchen']) THEN 'ok'
        ELSE 'not ok'
    END AS condition
FROM listings
ORDER BY condition ASC
LIMIT 5